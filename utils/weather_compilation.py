from math import ceil

from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiohttp import ClientSession
from aioredis import from_url as aioredis_from_url

from config import bot_config
from loader import logger_guru, dp
from .misc.enums_data import ApiInfo


async def create_weather_forecast() -> str:
    """
    Weather api request func
    :return: weather for the current hour
    """
    if isinstance(dp. storage, RedisStorage2):
        async with aioredis_from_url(**bot_config.redis.redis_data_cache.as_dict()) as connect_redis:
            if data := await connect_redis.get('weather_cache'):
                return data.decode()

    try:
        req: dict = await get_weather_info()

        temp: int = ceil(req['main']['temp_min'])
        wind: float = ceil(req['wind']['speed'])
        weather: str = req['weather'][0]['description']
        weather_main: str = req['weather'][0]['main']
    except KeyError:
        logger_guru.warning("Main API didn't work !")

        req: dict = await get_weather_info(is_alter=True)

        temp: int = ceil(req['DailyForecasts'][0]['RealFeelTemperature']['Maximum']['Value'])
        wind: float = ceil(req['DailyForecasts'][0]['Day']['Wind']['Speed']['Value'])
        weather: str = req['DailyForecasts'][0]['Day']['ShortPhrase']
        weather_main: str = ''

        if req['DailyForecasts'][0]['Day']['ThunderstormProbability'] >= 40:
            weather_main: str = 'thunderstorm'
        if req['DailyForecasts'][0]['Day']['RainProbability'] >= 40:
            weather_main: str = 'rain'

    if 4 <= temp <= 10:
        rep_temp: str = '–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–ª–æ–¥–Ω–æ ‚ùÑ'
    elif temp <= 3:
        rep_temp: str = '–•–æ–ª–æ–¥–Ω–æ! ‚ùÑ –æ–¥–µ–≤–∞–π—Å—è –ø–æ—Ç–µ–ø–ª–µ–µ!'
    else:
        rep_temp: str = '–¢–µ–ø–ª–æ, —Ö–æ—Ä–æ—à–æ ! –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Ç—ë–ø–ª—ã–π –¥–µ–Ω—å üåû'
    if wind <= 5:
        rep_wind: str = '–Ω–µ —Å—Ç—Ä–∞—à–Ω–æ :)'
    elif 5 < wind < 15:
        rep_wind: str = '–í–µ—Ç–µ—Ä –æ—â—É—â–∞–µ—Ç—Å—è! –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–¥–µ—Ç—å —à–∞—Ä—Ñ!'
    else:
        rep_wind: str = '–®—Ç–æ—Ä–º–æ–≤–æ–π –≤–µ—Ç—Ä–∏—â–µ! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –≤–µ—Ç—Ä–∞ –∏ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º!'

    take_an_umbrella_with_you: str = (
        '<b>‚õà –ù–ï –ó–ê–ë–£–î–¨ –í–ó–Ø–¢–¨ –ó–û–ù–¢ ‚òî</b>'
        if any(x in weather_main.lower() for x in ('rain', 'thunderstorm')) else ''
    )
    generated_msg: str = (
        f"–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç <CODE>{weather.upper()} {temp}&#176;</CODE>\n<b>{rep_temp}</b>\n"
        f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ <CODE>{wind}</CODE> –º/—Å,\n{rep_wind}\n{take_an_umbrella_with_you}"
    )
    if isinstance(dp.storage, RedisStorage2):
        async with aioredis_from_url(**bot_config.redis.redis_data_cache.as_dict()) as connect_redis:
            await connect_redis.setex('weather_cache', 3600, generated_msg)

    return generated_msg


async def get_weather_info(is_alter: bool = False) -> dict:
    """
    Request to API.
    :param is_alter: request to alternative API
    :return: API answer
    """
    if is_alter:
        async with ClientSession() as session:
            async with session.get(ApiInfo.GET_CITY_ID.value) as resp_city:
                received_city: str = (await resp_city.json())[0]['Key']
            async with session.get(ApiInfo.WEATHER_API_RESERVE.value.replace('CITY', received_city)) as resp:
                result: dict = await resp.json()
    else:
        async with ClientSession() as session:
            async with session.get(ApiInfo.WEATHER_API_BASIC.value) as resp:
                result: dict = await resp.json()
    return result
