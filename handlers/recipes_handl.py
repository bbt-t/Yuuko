from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery, ChatActions, ContentType

from loader import dp
from middlewares.throttling import rate_limit
from utils.database_manage.sql.sql_commands import DB_USERS
from utils.keyboards.recipe_kb import pagination_recipe_keyboard


@rate_limit(2, key='recipe')
@dp.message_handler(Command('recipe'))
async def write_or_memorize_recipes(message: Message, state: FSMContext):
	lang, skin = await DB_USERS.select_lang_and_skin(telegram_id=message.from_user.id)

	await message.delete()
	msg_sticker = await message.answer_sticker(skin.welcome.value, disable_notification=True)
	await message.answer(
		'–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ?' if lang == 'ru' else 'What do we do?',
		reply_markup=await pagination_recipe_keyboard(is_action=True))
	await state.set_state('recipe_name_entry')
	async with state.proxy() as data:
		data['lang'] = lang
		data['msg_sticker_id'] = msg_sticker.message_id


@dp.callback_query_handler(text={'receipt_of_prescription_info', 'recipe_name'}, state='recipe_name_entry')
async def write_recipe(call: CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		lang, msg_sticker_id = data.values()
		del data['msg_sticker_id']

	await dp.bot.delete_message(chat_id=call.message.chat.id, message_id=msg_sticker_id)
	msg_with_name: Message = await call.message.edit_text(
		'–∏–º—è?',
		reply_markup=await pagination_recipe_keyboard()
	)
	if call.data == 'receipt_of_prescription_info':
		async with state.proxy() as data:
			data['msg_with_name'] = msg_with_name.message_id
	elif call.data == 'recipe_name':
		await state.set_state('get_the_recipe')


@dp.message_handler(state='recipe_name_entry')
async def write_recipe_name(message: Message, state: FSMContext):
	async with state.proxy() as data:
		lang, for_del_msg = data.get('lang'), data.get('msg_with_name')
		del data['msg_with_name']

	if len(name := message.text) <= 32:
		await message.delete()
		await dp.bot.delete_message(chat_id=message.chat.id, message_id=for_del_msg)
		msg_with_ingredients: Message = await message.answer(
			'–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã?\n\n(—Å–ø–∏—Å–∫–æ–º –∏–ª–∏ –∫–∞–∂–¥—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)',
			reply_markup=await pagination_recipe_keyboard()
		)
		await state.set_state('recipe_ingredients')
		async with state.proxy() as data:
			data['name_recipe'] = name
			data['msg_with_ingredients_id'] = msg_with_ingredients.message_id
	else:
		await message.reply('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ üßê –Ω–∞–∑–≤–∞–Ω–∏–µ... –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
		await state.finish()


@dp.message_handler(state='recipe_ingredients')
async def write_recipe_ingredients(message: Message, state: FSMContext):
	async with state.proxy() as data:
		lang, for_del_msg = data.get('lang'), data.get('msg_with_ingredients_id')
		data['ingredients'] = message.text
		del data['msg_with_ingredients_id']

	await message.delete()
	await dp.bot.delete_message(chat_id=message.chat.id, message_id=for_del_msg)
	await message.answer(
		'–∞ —Ç–µ–ø–µ—Ä—å —Å–∞–º —Ä–µ—Ü–µ–ø—Ç',
		reply_markup=await pagination_recipe_keyboard(),
	)
	await state.set_state('and_now_the_recipe')


@dp.message_handler(state='and_now_the_recipe')
async def write_and_now_recipe(message: Message, state: FSMContext):
	async with state.proxy() as data:
		lang, name_recipe, ingredients = data.values()
	try:
		await DB_USERS.add_recipe(
			telegram_id=message.from_user.id,
			name=name_recipe,
			ingredients=ingredients,
			recipe=message.text
		)
	except:
		await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî')
	else:
		await message.answer('–ì–û–¢–û–í–û! ü•≥')
	finally:
		await state.finish()


@dp.message_handler(state='get_the_recipe')
async def memorize_recipes(message: Message, state: FSMContext):
	async with state.proxy() as data:
		lang = data['lang']

	await message.answer_chat_action(ChatActions.TYPING)
	try:
		match await DB_USERS.select_recipe(telegram_id=message.from_user.id, name=message.text):
			case ingredients, recipe, photo_url:
				await message.answer_photo(photo_url)
			case ingredients, recipe:
				await message.answer('–í–û–¢:\n')
				await message.answer('–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≤—ã–∑–æ–≤–∏ –º–µ–Ω—è –µ—â—ë —Ä–∞–∑ :)')
	except TypeError:
		await message.reply(
			'–ù–µ—Ç —Ç–∞–∫–æ–≥–æ :(' if lang == 'ru' else 'There is no such :('
		)
	else:
		await message.answer(
			f'<b>–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã:</b>\n{ingredients}\n\n'
			f'<b>–†–µ—Ü–µ–ø—Ç:</b>\n{recipe}')
	finally:
		await state.finish()


@dp.callback_query_handler(text='receipt_add_photo', state='recipe_name_entry')
async def recipe_send_photo(call: CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		lang, msg_sticker_id = data.values()
		del data['msg_sticker_id']

	await call.message.delete()
	await dp.bot.delete_message(chat_id=call.message.chat.id, message_id=msg_sticker_id)
	await call.answer('–ñ–¥—É —Ñ–æ—Ç–∫—É...', show_alert=True)
	await call.message.answer('–î–ª—è –º–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞, –ø–ª–∑, –Ω–∞–ø–∏—à–∏ –∏–º—è —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —Ñ–æ—Ç–æ :)')
	await state.set_state('recipe_photo_reception')


@dp.message_handler(state='recipe_photo_reception', content_types=ContentType.TEXT)
async def recipe_photo_reception_name(message: Message, state: FSMContext):
	name: str = message.text
	async with state.proxy() as data:
		try:
			photo_url: str = data['photo_url']
			await DB_USERS.update_recipe_photo(
				telegram_id=message.from_user.id, name=name, photo_url=photo_url
			)
			await message.answer('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ü•≥')
			await state.finish()
		except KeyError:
			data['name'] = name
			return await message.answer('–§–æ—Ç–∫—É! —Ñ–æ—Ç–∫—É –ø—Ä–∏—Å—ã–ª–∞–π!')


@dp.message_handler(state='recipe_photo_reception', content_types=ContentType.PHOTO)
async def recipe_photo_reception(message: Message, state: FSMContext):
	photo_url: str = message.photo[-1].file_id
	async with state.proxy() as data:
		try:
			name: str = data['name']
		except KeyError:
			name: str = message.caption

	if name:
		await DB_USERS.update_recipe_photo(telegram_id=message.from_user.id, name=name, photo_url=photo_url)
		await message.answer('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ü•≥')
		await state.finish()
	else:
		async with state.proxy() as data:
			data['photo_url'] = photo_url

		return await message.answer('–ò–º—è —Ä–µ—Ü–µ–ø—Ç–∞?\n(–Ω—É, –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫—É...)')
	await state.finish()

# ToDo: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –±–∞–∑–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.
# ToDo: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç/—ã.
# ToDo: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏/–æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–º–µ–Ω–∏.

# ToDo: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–ø.–∫–Ω–æ–ø–∫—É –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ.
# ToDo: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–º—ë–Ω —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å).

